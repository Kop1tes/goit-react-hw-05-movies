{"version":3,"file":"static/js/257.f4bddecf.chunk.js","mappings":"+QAGaA,EAAOC,EAAAA,QAAAA,IAAH,4MASJC,EAAWD,EAAAA,QAAAA,IAAH,wKAQRE,EAAUF,EAAAA,QAAAA,IAAH,oHAMPG,GAAUH,EAAAA,EAAAA,SAAOI,EAAAA,GAAPJ,CAAH,+I,4BCgEpB,EA/EqB,WAAO,IAAD,QACfK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAajB,IAXAC,EAAAA,EAAAA,YAAU,WACNH,GAAW,IACXI,EAAAA,EAAAA,IAAmBC,OAAOb,IACrBc,KAAKV,GACLW,OAAM,SAAAV,GACHC,EAdM,sOAeNU,QAAQC,IAAIZ,EACf,IACAa,SAAQ,kBAAMV,GAAW,EAAjB,GAChB,GAAE,CAACR,KAECG,EACD,OAAO,KAGX,IAAMgB,EAAY,oBAAGV,EAASW,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UACvCC,EAAQ,oBAAGb,EAASW,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAGzC,OACI,+BACI,UAACE,EAAA,EAAD,YACI,SAACzB,EAAD,CAAS0B,GAAIL,EAAb,4BACCZ,IAAW,SAACkB,EAAA,EAAD,IACXpB,IAAS,yBAAMA,IACfF,IACG,UAACT,EAAD,YACI,SAACG,EAAD,CACI6B,IACIvB,EAAMwB,YAAN,0CACyCxB,EAAMwB,aACzCC,EAEVC,IAAK1B,EAAM2B,SAEf,UAAClC,EAAD,YACI,wBAAKO,EAAM2B,SACX,wBACI,gCArBF,IAAIC,KAAK5B,EAAM6B,cAAcC,cAqB3B,UAEJ,wCAAgB9B,EAAM+B,eACtB,uCACA,uBAAI/B,EAAMgC,YACV,qCACA,uBAAIhC,EAAMiC,OAAOC,KAAI,SAAAC,GAAK,gBAAOA,EAAMC,KAAb,iBAItC,mBACA,4BACI,oDACA,2BACI,yBACI,SAACzC,EAAD,CAAS0B,GAAG,OAAOJ,MAAO,CAAEC,KAAMC,GAAlC,qCAIJ,yBACI,SAACxB,EAAD,CAAS0B,GAAG,UAAUJ,MAAO,CAAEC,KAAMC,GAArC,0CAKR,SAAC,EAAAkB,SAAD,CAAUC,UAAU,SAAChB,EAAA,EAAD,IAApB,UACI,SAAC,KAAD,aAMvB,C","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.div`\n  width: 700px;\n  display: flex;\n  border-radius: 20px;\n  padding: 10px;\n  box-shadow: 2px 2px 3px 0px rgba(0, 0, 0, 0.2);\n  background-color: var(--secondary-accent-color);\n`;\n\nexport const InfoList = styled.div`\n  display: flex;\n  align-content: flex-start;\n  flex-wrap: wrap;\n  flex-direction: column;\n  padding: 10px;\n  color: var(--accent-color);\n`;\nexport const ListImg = styled.img`\n  border-radius: 3px;\n  width: 100%;\n  box-shadow: 2px 3px 3px 0px rgba(0, 0.2, 0, 0.2);\n`;\n\nexport const LinkNav = styled(NavLink)`\n  text-decoration: none;\n  color: var(--secondary-accent-color);\n  &.active {\n    color: var(--accent-color);\n  }\n`;","import { useState, useEffect } from \"react\";\nimport { Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { getFetchMoviesById } from \"services/moviesApi\";\nimport { Suspense } from \"react\";\nimport loding from 'img/loading.jpg';\nimport { List, ListImg, InfoList, LinkNav } from \"./MovieDetails.styled\";\nimport Loader from 'components/Loader/Loader';\nimport { Container } from \"components/Container/Container\";\n\nconst ERROR_MESSAGE = 'Что-то пошло не так, перезагрузите страницу...';\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const location = useLocation();\n\n    useEffect(() => {\n        setLoading(true);\n        getFetchMoviesById(Number(movieId))\n            .then(setMovie)\n            .catch(error => {\n                setError(ERROR_MESSAGE);\n                console.log(error);\n            })\n            .finally(() => setLoading(false));\n    }, [movieId]);\n\n    if (!movie) {\n        return null;\n    };\n\n    const backLinkHref = location.state?.from ?? '/movies';\n    const backLink = location.state?.from ?? '/';\n    const getYearDate = () => new Date(movie.release_date).getFullYear();\n\n    return (\n        <>\n            <Container>\n                <LinkNav to={backLinkHref}>Back to movies</LinkNav>\n                {loading && <Loader />}\n                {error && <div>{error}</div>}\n                {movie && (\n                    <List>\n                        <ListImg\n                            src={\n                                movie.poster_path\n                                    ? `https://image.tmdb.org/t/p/w200/${movie.poster_path}`\n                                    : loding\n                            }\n                            alt={movie.title}\n                        />\n                        <InfoList>\n                            <h2>{movie.title}</h2>\n                            <p>\n                                <span>({getYearDate()})</span>\n                            </p>\n                            <p>User Score: {movie.popularity}</p>\n                            <h3>Overview:</h3>\n                            <p>{movie.overview}</p>\n                            <h3>Gernes:</h3>\n                            <p>{movie.genres.map(genre => `${genre.name} `)}</p>\n                        </InfoList>\n                    </List>\n                )}\n                <hr />\n                <div>\n                    <h3>Additional information</h3>\n                    <ul>\n                        <li>\n                            <LinkNav to=\"cast\" state={{ from: backLink }}>\n                                Get to know the cast\n                            </LinkNav>\n                        </li>\n                        <li>\n                            <LinkNav to=\"reviews\" state={{ from: backLink }}>\n                                Go through the reviews\n                            </LinkNav>\n                        </li>\n                    </ul>\n                    <Suspense fallback={<Loader />}>\n                        <Outlet />\n                    </Suspense>\n                </div>\n            </Container>\n        </>\n    );\n};\n\nexport default MovieDetails;"],"names":["List","styled","InfoList","ListImg","LinkNav","NavLink","movieId","useParams","useState","movie","setMovie","error","setError","loading","setLoading","location","useLocation","useEffect","getFetchMoviesById","Number","then","catch","console","log","finally","backLinkHref","state","from","backLink","Container","to","Loader","src","poster_path","loding","alt","title","Date","release_date","getFullYear","popularity","overview","genres","map","genre","name","Suspense","fallback"],"sourceRoot":""}